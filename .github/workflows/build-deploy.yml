name: Build and Deploy Code

on:
  push:
    branches: ['main']
  pull_request: 
    branches: ['main']
jobs:
  Build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      TEST_DATABASE_NAME: ${{ secrets.TEST_DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_TIME: ${{ secrets.ACCESS_TOKEN_EXPIRE_TIME }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DATABASE_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2
      
      - name: Installing Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Update pip
        run: pip install --upgrade pip
      
      - name: Installing dependencies
        run: pip install -r requirements.txt
      
      - name: Testing with Pytest
        run: |
          pip install pytest
          pytest -v
      
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2
      
      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{secrets.DOCKER_HUB_USERNAME}}/fastapi:latest
      
      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{runner.os}}-buildx-${{github.sha}}
      #     restore-keys: |
      #       ${{runner.os}}-buildx

  Deploy:
    environment:
      name: production
    runs-on: ubuntu-latest
    needs: Build
      
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_DEPLOY_HOOK }}
          api-key: ${{ secrets.RENDER_TOKEN }}

